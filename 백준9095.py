#n<11
#정수가 주어졌을때 123의 합으로 나타내는 방법
# 1 1  / 1가지
# 2 1,1 / 2  2가지
# 3 1,1,1 /1,2 /2,1/ 3  4가지 
# 4 1,1,1,1 / 1,1,2 /1,2,1/ 1,3 /2,1,1/  2,2 /3,1/ 7가지
# 5 1,1,1,1,1 /1,1,1,2 / 1,1,2,1 /1,1,3 /1,2,1,1/1,2,2/1,3,1/ 7
# 2,1,1,1/2,1,2/2,2,1/2,3/ 4
# 3,1,1/3,2  2 13가지
# 규칙 위에꺼 3개 가지수 합이 본가짓수임 
# 바로위에 꺼 에 1을더하고 그위에꺼 2더하고 3을 더하면 가짓수가 나오기 때문

import sys
input=sys.stdin.readline
n = int(input()) #몇번할까 예제 3이니까 3번
d=[1,2,4]
for i in range(3,10) :
    #그전 코드는 어펜드가아님 sum이용했음
   d.sum(d[i-3]+d[i-2]+d[i-1])
   #File "c:\codestart\백준 알고리즘\python-alc\백준9095.py", line 18, in <module>
   #오류가남 맞는거 같은데 안됨
for i in range(n): #구하려는 값넣는 곳
    m=int(input())
    print(d[m-1])
    
    # 구글링 하니까 동적계획법을 사용해야 된다고함 dp라고 함
    #dp 하나의 문제를 여러개의 작은 문제로 나누기 피보나치등
    #쓰는 이유 비효율적 계산을 막기 위해 작은 계산 반복 때문에
    #dp 사용 조건 반복되는 구간 문제 계산 반복 + 부분들의 합이 전체 합임 위도 그럼
    
    #dp 사용 방법 조건 확인
    #점화식 만들기
    # 기저 상태 확인  ex)위에 처럼 4를 구할때 d[0] ..d[2] 까지 3개 가더하면 결과를 구하는 최저 구성
    # 이거는 아래에서 위로올라가는 방식 
    #위에서 내려오는 방식도 있음